<?php
/**
 * ExiteCMS
 *
 * ExiteCMS is a fast and lightweight web application framework.
 *
 * @package		ExiteCMS
 * @version		8.0
 * @author		ExiteCMS Development Team
 * @license		Open Software License v. 3.0
 * @copyright	2011-2012 ExiteCMS Development Team
 * @link		http://www.exitecms.org
 */

namespace ExiteCMS\Core;

class Messages
{

	/**
	 * all messages generated by the core code, modules and plugins
	 * are collected in this variable for display in the message panel
	 *
	 * @var		array
	 * @access	protected
	 */
	protected static $_messages = array();

	/**
	 * exitecms set message function, to add messages for display using
	 * the messages element (if defined on the page)
	 *
	 * @param string
	 * @param string
	 * @param boolean
	 * @return void
	 */
	public static function set($message, $type='N', $wipe = FALSE)
	{
		// do we have a message?
		if (empty($message))
		{
			// no, nothing to do here
			return;
		}

		// validate the type
		$type = strtoupper($type);
		switch ($type)
		{
			case 'C':	// checked messages
			case 'E':	// error messages
			case 'I':	// informational messages
			case 'N':	// normal messages
			case 'W':	// warning messages
				break;
			default:
				$type = 'N';	// default type is normal
		}

		// make sure the message parameter is an array
		if ( ! is_array($message) )
		{
			// split the messages if needed
			if (strpos($message, '{#$#}') !== FALSE)
			{
				$message = explode('{#$#}', $message);
			}
			else
			{
				$message = array($message);
			}
		}

		// reset the message array if requested
		if ( $wipe )
		{
			static::$_messages = array();
		}

		// add the messages to the array
		foreach ($message as $msg)
		{
			// trim all whitespace to avoid layout issues later
			$msg = trim($msg);

			// make sure we're not adding empty messages!
			if (!empty($msg))
			{
				static::$_messages[] = array('type' => $type, 'message' => $msg);
			}
		}
	}

	// -----------------------------------------------------------------

	/**
	 * returns all stored messages
	 *
	 * @param void
	 * @param string
	 * @return void
	 */
	public static function get()
	{
		// return the messages array
		return static::$_messages;
	}

	// -----------------------------------------------------------------

	/**
	 * counts the number of messages stored
	 *
	 * @param boolean	$error	if true, counts only error messages
	 * @param string
	 * @return void
	 */
	public static function count($error = false)
	{
		// counter variable
		$i = 0;

		// loop through the messages
		foreach (static::$_messages as $msg)
		{
			// count this one if we want all, or if it's an error message
			if ($error === false OR $msg['type'] == 'E')
			{
				$i++;
			}
		}
		return $i;
	}

	// -----------------------------------------------------------------

	/**
	 * saves all pending messages to session flash
	 *
	 * @param void
	 * @param string
	 * @return void
	 */
	public static function to_flash()
	{
		$session = \Session::forge();

		// get the current flash_id and set it to exitecms
		$fk = $session->get_flash_id();
		$session->set_flash_id('exitecms');

		// save any messages in flash
		$session->set_flash('messages', static::$_messages);

		// restore the original flash_id
		$session->set_flash_id($fk);
	}

	// -----------------------------------------------------------------
}
